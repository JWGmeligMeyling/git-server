<?xml version="1.0"?>

<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="Moodcat PMD ruleset" xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
  <description>
    MoodCat PMD rules to apply on the codebase.
  </description>
  <exclude-pattern>.*/test/java/.*</exclude-pattern>
  <exclude-pattern>.*/dev/java/.*</exclude-pattern>
  <rule ref="rulesets/java/basic.xml"/>
  <rule ref="rulesets/java/braces.xml"/>
  <rule ref="rulesets/java/codesize.xml"/>
  <rule ref="rulesets/java/coupling.xml">
    <!-- Inheritly happening when using Guice, therefore these errors are not useful -->
    <exclude name="LawOfDemeter"/>
    <!-- Is a broken rule -->
    <exclude name="LoosePackageCoupling"/>
  </rule>
  <rule ref="rulesets/java/design.xml"/>
  <rule ref="rulesets/java/empty.xml"/>
  <rule ref="rulesets/java/imports.xml"/>
  <rule ref="rulesets/java/strings.xml"/>
  <rule ref="rulesets/java/unusedcode.xml">
    <!-- Lombok will cause errors for PMD, so we can safely exlude this one -->
    <exclude name="UnusedPrivateField"/>
  </rule>
  <rule ref="rulesets/java/junit.xml">
    <exclude name="JUnitAssertionsShouldIncludeMessage"/>
    <exclude name="JUnitTestContainsTooManyAsserts" />
  </rule>
  <rule ref="rulesets/java/junit.xml/JUnitTestContainsTooManyAsserts">
    <properties>
      <property name="maximumAsserts" value="5" />
    </properties>
  </rule>
  <rule name="UseExpectedThrowsInsteadOfCatchStatement"
        language="java"
        since="5.5"
        message="Use @Test(expected = Exception.class) or the ExpectedException JUnit rule instead of catching exceptions within test methods."
        class="net.sourceforge.pmd.lang.rule.XPathRule"
        externalInfoUrl="${pmd.website.baseurl}/rules/java/junit.html#UseExpectedThrowsInsteadOfCatchStatement">
    <description>When asserting that an exception is thrown, use @Test(expected = Exception.class) or the ExpectedException JUnit rule instead of catching exceptions within test methods.</description>
    <priority>3</priority>
    <properties>
      <property name="xpath">
        <value>
          <![CDATA[
//CatchStatement
[ancestor::ClassOrInterfaceDeclaration[//ClassOrInterfaceType[typeof(@Image, 'junit.framework.TestCase','TestCase')] or //MarkerAnnotation/Name[typeof(@Image, 'org.junit.Test', 'Test')]]]
]]>
        </value>
      </property>
    </properties>
    <example>
      <![CDATA[
public class MyTestCase {
	@Test
	public void badTestCase() {
		try {
			MayThrow.execute();
		}
		catch (Exception e) {
			return;
		}
		fail();
	}
	@Test(expected = Exception.class)
	public void goodTestCase() throws Exception {
		MayThrow.execute();
	}
}
]]>
    </example>
  </rule>
</ruleset>